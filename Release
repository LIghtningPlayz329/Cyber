local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "KynX",
    SubTitle = "by ahmed",
    TabWidth = 150,  -- Updated TabWidth
    Size = UDim2.fromOffset(510, 340),  -- Updated size
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftAlt
})

local Tabs = {
    Combat = Window:AddTab({ Title = "Combat", Icon = "swords" }), -- New Combat tab
    Auras = Window:AddTab({ Title = "Auras", Icon = "flame" }), -- Renamed Combat tab to Auras with flame icon
    Misc = Window:AddTab({ Title = "Misc", Icon = "hammer" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    Visual = Window:AddTab({ Title = "Visual", Icon = "eye" })
}

-- Adding a paragraph in the Auras Tab for Player Aura
Tabs.Auras:AddParagraph({
    Title = "⚔️-Player Aura-⚔️",
    Content = "Below you can find the Player Aura Settings."
})

-- Initialize variables
local isTeleportAuraOn = false
local isKillauraOn = false
local isChamsESPOn = false
local orbitConnection = nil
local args = {
    [1] = 1,
    [2] = nil -- Initialize with nil, will be updated later
}

-- Function to toggle Teleport Aura
local function toggleTeleportAura(state)
    if state then
        if isTeleportAuraOn then return end
        isTeleportAuraOn = true
        -- Execute the desired script when Teleport Aura is turned on
        print("Teleport Aura is now ON")  -- Placeholder for the actual script

        -- Add the orbit functionality
        local Players = game:GetService("Players")
        local localPlayer = Players.LocalPlayer
        local character = localPlayer.Character
        local humanoidRootPart = character.HumanoidRootPart
        local RunService = game:GetService("RunService")

        local function updateOrbit()
            -- Find the nearest living player within range
            local nearestPlayer = nil
            local nearestDistance = math.huge
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= localPlayer then
                    local character = player.Character
                    if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                        local distance = (character.HumanoidRootPart.Position - humanoidRootPart.Position).magnitude
                        if distance <= 16 and distance < nearestDistance then
                            nearestDistance = distance
                            nearestPlayer = player
                        end
                    end
                end
            end

            -- Orbit the nearest living player within range
            if nearestPlayer then
                local nearestCharacter = nearestPlayer.Character
                local nearestHumanoidRootPart = nearestCharacter.HumanoidRootPart
                local orbitPosition = nearestHumanoidRootPart.Position + Vector3.new(0, 10, 0) -- increased height by a lot
                local orbitRadius = 5.3 -- adjusted radius here
                local orbitSpeed = 21 -- adjusted spin speed

                local angle = tick() * orbitSpeed
                local x = math.cos(angle) * orbitRadius
                local z = math.sin(angle) * orbitRadius
                humanoidRootPart.CFrame = CFrame.new(orbitPosition + Vector3.new(x, 0, z))
            end
        end

        -- Connect the updateOrbit function to Heartbeat
        orbitConnection = RunService.Heartbeat:Connect(updateOrbit)

        -- Start the additional script functionality
        coroutine.wrap(function()
            while isTeleportAuraOn do
                -- Find the nearest player within range
                local nearestPlayer = nil
                local nearestDistance = math.huge
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= localPlayer then
                        local character = player.Character
                        if character then
                            local distance = (character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).magnitude
                            if distance <= 16 and distance < nearestDistance then
                                nearestDistance = distance
                                nearestPlayer = player
                            end
                        end
                    end
                end

                -- Update the args table with the nearest player if within range
                if nearestPlayer then
                    args[2] = nearestPlayer
                else
                    args[2] = nil
                end

                -- Fire the remote event with the updated args
                game:GetService("ReplicatedStorage").remoteInterface.interactions.meleePlayer:FireServer(unpack(args))

                -- Wait for 0.1 seconds before checking again
                wait(0.1)
            end
        end)()
    else
        if not isTeleportAuraOn then return end
        isTeleportAuraOn = false
        -- Remove the orbit update function when turning off
        if orbitConnection then
            orbitConnection:Disconnect()
            orbitConnection = nil
        end
    end
end

-- Function to toggle Killaura
local function toggleKillaura(state)
    if state then
        if isKillauraOn then return end
        isKillauraOn = true
        -- Execute the desired script when Killaura is turned on
        print("Killaura is now ON")  -- Placeholder for the actual script

        -- Implement Killaura functionality here, if needed
    else
        if not isKillauraOn then return end
        isKillauraOn = false
        -- Disable Killaura functionality here, if needed
    end
end

-- Function to enable Chams ESP
local function enableChamsESP()
    local function highlightPlayers()
        local players = game:GetService("Players"):GetPlayers()

        for _, player in pairs(players) do
            local character = player.Character or player.CharacterAdded:Wait()

            -- Create a Highlight object
            local highlight = Instance.new("Highlight")
            highlight.Name = "PlayerHighlight"
            highlight.Adornee = character

            -- Check if the player has a team
            if player.Team and player.Team.TeamColor then
                local teamColor = player.Team.TeamColor
                -- Set highlight color to the team color
                highlight.FillColor = teamColor.Color
                highlight.OutlineColor = teamColor.Color
            else
                -- Set highlight color to white if not in a team
                highlight.FillColor = Color3.fromRGB(255, 255, 255) -- White color
                highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- White color
            end

            highlight.FillTransparency = 0.65 -- Set transparency to 0.65
            highlight.OutlineTransparency = 0.65 -- Set transparency to 0.65
            highlight.Parent = character

            -- Handle respawn or character changes
            player.CharacterAdded:Connect(function(char)
                highlight.Adornee = char
            end)
        end
    end

    -- Call the function to highlight players
    highlightPlayers()
end

-- Function to disable Chams ESP
local function disableChamsESP()
    local players = game:GetService("Players"):GetPlayers()
    for _, player in pairs(players) do
        local character = player.Character
        if character then
            local highlight = character:FindFirstChild("PlayerHighlight")
            if highlight then
                highlight:Destroy()
            end
        end
    end
end

-- Create and setup the Teleport Aura toggle
local TeleportAuraToggle = Tabs.Auras:AddToggle("TeleportAuraToggle", { Title = "🏃-Teleport Aura", Default = false })
TeleportAuraToggle:OnChanged(function(value)
    toggleTeleportAura(value)
end)

-- Create and setup the Killaura toggle
local KillauraToggle = Tabs.Auras:AddToggle("KillauraToggle", { Title = "🗡️-Killaura", Default = false })
KillauraToggle:OnChanged(function(value)
    toggleKillaura(value)
end)

-- Add NPC Aura paragraph under the Killaura toggle
Tabs.Auras:AddParagraph({
    Title = "🛡️-NPC Aura🛡️",
    Content = "Below you can find the NPC Auras."
})

-- Create and setup the Chams ESP toggle
local ChamsESPToggle = Tabs.Visual:AddToggle("ChamsESPToggle", { Title = "Chams ESP", Default = false })
ChamsESPToggle:OnChanged(function(value)
    if value then
        isChamsESPOn = true
        enableChamsESP()
    else
        isChamsESPOn = false
        disableChamsESP()
    end
end)

-- Create and setup the Infinite Stamina button without a callback function
local InfiniteStaminaButton = Tabs.Misc:AddButton({
    Title = "💨-Infinite Stamina-💨",
    Description = "This script will enable Infinite Stamina.",
    Callback = function()
        -- Placeholder for Infinite Stamina script
    end
})

-- Create and setup the Anti Fall Damage button
local AntiFallDamageButton = Tabs.Misc:AddButton({
    Title = "🍁-Anti Fall Damage-🍁",
    Description = "This script will disable Fall Damage.",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        -- Function to disable fallDamage LocalScript
        local function disableFallDamage()
            -- Ensure LocalPlayer and its character are available
            if LocalPlayer and LocalPlayer.Character then
                -- Check each descendant of the LocalPlayer's character
                for _, desc in ipairs(LocalPlayer.Character:GetDescendants()) do
                    -- Find the LocalScript named 'fallDamage'
                    if desc:IsA("LocalScript") and desc.Name == "fallDamage" then
                        desc.Disabled = true
                        print("fallDamage LocalScript has been disabled.")
                        return -- Exit after disabling the script
                    end
                end
            end
        end

        -- Call the function to disable fall damage
        disableFallDamage()
    end
})
